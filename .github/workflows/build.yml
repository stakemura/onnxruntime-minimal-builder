name: Build minimal ONNX Runtime

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version (e.g., 1.16.3)"
        required: true
      repository:
        description: "Name of a target repository"
        default: 'microsoft/onnxruntime'
        required: false

env:
  ORT_PYTHON_VERSION: '3.10'
  VERSION:
    |- # Enter release tag name or version in workflow_dispatch. Recent version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.16.3' }}
  REPOSITORY:
    ${{ github.event.inputs.repository || 'microsoft/onnxruntime' }}

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - artifact_name: onnxruntime-win-x64
            os: windows-2022
            build_opts: --minimal_build extended --use_xnnpack --disable_ml_ops --cmake_extra_defines CMAKE_SYSTEM_NAME=Windows CMAKE_SYSTEM_PROCESSOR=x86_64
            result_dir: build/Release
          - artifact_name: onnxruntime-linux-x64
            os: ubuntu-22.04
            build_opts: --minimal_build extended --use_xnnpack --disable_ml_ops --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=x86_64
            result_dir: build
          - artifact_name: onnxruntime-linux-armhf
            os: ubuntu-22.04
            cc_version: "9"
            cxx_version: "9"
            linux_cross_arch: arm-linux-gnueabihf
            symlink_workaround: true
            build_opts: --minimal_build --disable_ml_ops --arm --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=armv7l
            result_dir: build
          - artifact_name: onnxruntime-linux-arm64
            os: ubuntu-22.04
            cc_version: "9"
            cxx_version: "9"
            linux_cross_arch: aarch64-linux-gnu
            symlink_workaround: true
            build_opts: --minimal_build extended --use_xnnpack --disable_ml_ops --arm64 --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux CMAKE_SYSTEM_PROCESSOR=aarch64
            result_dir: build
          - artifact_name: onnxruntime-osx-arm64
            os: macos-12
            build_opts: --minimal_build --disable_ml_ops --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES=arm64
            result_dir: build
          - artifact_name: onnxruntime-osx-x86_64
            os: macos-12
            build_opts: --minimal_build --disable_ml_ops --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES=x86_64
            result_dir: build
          - artifact_name: onnxruntime-osx-universal2
            os: macos-12
            build_opts: --minimal_build --disable_ml_ops --cmake_extra_defines CMAKE_SYSTEM_NAME=Darwin CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            result_dir: build
          - artifact_name: onnxruntime-android-x86_64
            os: ubuntu-22.04
            build_opts: --minimal_build extended --use_xnnpack --disable_ml_ops --android_abi x86_64 --cmake_extra_defines CMAKE_SYSTEM_NAME=Android CMAKE_SYSTEM_PROCESSOR=x86_64 --android
            result_dir: build
          - artifact_name: onnxruntime-android-arm64
            os: ubuntu-22.04
            build_opts: --minimal_build extended --use_xnnpack --disable_ml_ops --android_abi arm64-v8a --cmake_extra_defines CMAKE_SYSTEM_NAME=Android CMAKE_SYSTEM_PROCESSOR=aarch64 --android
            result_dir: build

    env:
      # prefix usage: "", "arm-linux-gnueabihf-" => "gcc-8", "arm-linux-gnueabihf-gcc-8" (command name)
      # suffix usage: "", "-arm-linux-gnueabihf" => "gcc-8", "gcc-8-arm-linux-gnueabihf" (package name)
      ARCH_PREFIX: "${{ (matrix.linux_cross_arch != '' && matrix.linux_cross_arch) || '' }}${{ (matrix.linux_cross_arch != '' && '-') || '' }}"
      ARCH_SUFFIX: "${{ (matrix.linux_cross_arch != '' && '-') || '' }}${{ (matrix.linux_cross_arch != '' && matrix.linux_cross_arch) || '' }}"

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY }}
          ref: v${{ env.VERSION }}
          submodules: recursive
          github-server-url: https://github.com

      - uses: actions/setup-python@v4 
        with: 
          python-version: ${{ env.ORT_PYTHON_VERSION }}
            
      - name: Install build dependencies on ubuntu
        if: startsWith(matrix.os, 'ubuntu') && matrix.linux_cross_arch
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              build-essential \
              git \
              wget \
              qemu-user-binfmt \
              gcc-${{ matrix.cc_version }}${{ env.ARCH_SUFFIX }} \
              g++-${{ matrix.cxx_version }}${{ env.ARCH_SUFFIX }}
                
      - name: Install build dependencies on macos
        if: startsWith(matrix.os, 'macos')
        run: |
          pip install --no-cache-dir flatbuffers

      - name: Configure build environment for non-x86_64 Linux
        if: startsWith(matrix.os, 'ubuntu') && matrix.linux_cross_arch
        run: |
          # Required for arm build
          # https://github.com/microsoft/onnxruntime/issues/4189#issuecomment-642528278
          echo 'string(APPEND CMAKE_C_FLAGS " -latomic")' >> cmake/CMakeLists.txt
          echo 'string(APPEND CMAKE_CXX_FLAGS " -latomic")' >> cmake/CMakeLists.txt

          # Prevent Exec Format Error during cross-compiling
          if ${{ matrix.symlink_workaround }}; then
            find /usr/${{ matrix.linux_cross_arch }}/lib -name '*.so*' -exec sudo ln -s {} /usr/lib/${{ matrix.linux_cross_arch }}/ ';'
            sudo ln -s /usr/${{ matrix.linux_cross_arch }}/lib/ld-linux-*.so* /usr/lib/
          fi

          # Set environment variable CC / CXX
          echo "CC=${{ env.ARCH_PREFIX }}gcc-${{ matrix.cc_version }}" >> "$GITHUB_ENV"
          echo "CXX=${{ env.ARCH_PREFIX }}g++-${{ matrix.cxx_version }}" >> "$GITHUB_ENV"

      - name: Build ONNX Runtime
        run: |
          python ./tools/ci_build/build.py --build_dir ./build ${{ matrix.build_opts }} --config Release --parallel --compile_no_warning_as_error --update --build --build_shared_lib --skip_tests

      - name: Organize artifact
        run: |
          rm -rf ${{ matrix.result_dir }}/${{ matrix.artifact_name }}
          rm -rf ./artifact
          # Set library name
          if [[ ${{ matrix.artifact_name }} == onnxruntime-win-* ]]; then
            ONNXRUNTIME_NAME=onnxruntime.dll
          elif [[ ${{ matrix.artifact_name }} == onnxruntime-linux-* ]]; then
            ONNXRUNTIME_NAME=libonnxruntime.so.${{ env.VERSION }}
          elif [[ ${{ matrix.artifact_name }} == onnxruntime-android-* ]]; then
            ONNXRUNTIME_NAME=libonnxruntime.so
          elif [[ ${{ matrix.artifact_name }} == onnxruntime-osx-* ]]; then
            ONNXRUNTIME_NAME=libonnxruntime.${{ env.VERSION }}.dylib
          else
            echo "Unknown target found : ${{ matrix.artifact_name }}"
            return 1
          fi
          ./tools/ci_build/github/linux/copy_strip_binary.sh \
            -r ${{ matrix.result_dir }} \
            -a ${{ matrix.artifact_name }} \
            -l $ONNXRUNTIME_NAME \
            -c Release \
            -s "$(pwd)" \
            -t "$(git rev-parse HEAD)"
          mv ${{ matrix.result_dir }}/${{ matrix.artifact_name }} ./artifact/

      - name: Rearchive artifact
        run: |
          mv artifact/ "${{ matrix.artifact_name }}-${{ env.VERSION }}"
          tar cfz "${{ matrix.artifact_name }}-${{ env.VERSION }}.tgz" "${{ matrix.artifact_name }}-${{ env.VERSION }}/"

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.tgz"
          tag_name: ${{ env.VERSION }}

  build-aar:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY }}
          ref: v${{ env.VERSION }}
          submodules: recursive
          github-server-url: https://github.com
        
      - uses: actions/setup-python@v4 
        with: 
          python-version: ${{ env.ORT_PYTHON_VERSION }}
      
      - name: Build ONNX Runtime
        run: |
          python tools/android_custom_build/build_custom_android_package.py --onnxruntime_branch_or_tag v${{ env.VERSION }} --build_settings tools/ci_build/github/android/default_mobile_aar_build_settings.json .

      - name: Archive artifact
        run: |
          tar cfz "onnxruntime-android-aar-${{ env.VERSION }}.tgz" output/aar_out/

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.tgz"
          tag_name: ${{ env.VERSION }}

  build-xcframework:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY }}
          ref: v${{ env.VERSION }}
          submodules: recursive
          github-server-url: https://github.com
        
      - uses: actions/setup-python@v4 
        with: 
          python-version: ${{ env.ORT_PYTHON_VERSION }}
      
      - name: Install build dependencies on macos
        run: |
          pip install --no-cache-dir flatbuffers

      - name: Build ONNX Runtime
        run: |
          python tools/ci_build/github/apple/build_ios_framework.py tools/ci_build/github/apple/default_mobile_ios_framework_build_settings.json --config MinSizeRel

      - name: Archive artifact
        run: |
          cd build/iOS_framework/framework_out
          7z a "../../onnxruntime-ios-xcframework-${{ env.VERSION }}.zip" "onnxruntime.xcframework"          
  
      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          files: "*.zip"
          tag_name: ${{ env.VERSION }}
    